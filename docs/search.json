[{"path":[]},{"path":"https://monasharp.github.io/game-package-wombats/AI-statement.html","id":"use-of-ai-and-generative-ai-tools","dir":"","previous_headings":"","what":"Use of AI and Generative AI Tools","title":"AI Statement for Blackjack R Package Project","text":"compliance University policy responsible AI use, openly clearly acknowledge extensive use generative AI tools‚Äîincluding OpenAI ChatGPT GitHub Copilot‚Äîdevelopment assignment.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/AI-statement.html","id":"how-ai-was-used","dir":"","previous_headings":"Use of AI and Generative AI Tools","what":"How AI Was Used","title":"AI Statement for Blackjack R Package Project","text":"course project, group members used AI tools following purposes: Initial code generation scaffolding: Many basic functions, S3 class constructors, control-flow templates (including functions card creation, game setup, simulation loops, unit tests) generated using ChatGPT based functional requirements. example, asked ChatGPT ‚Äúwrite R function simulate dealing cards Blackjack‚Äù ‚Äúprovide S3 constructor card object‚Äù. thoroughly reviewed, modified, extended, integrated code package structure, ensuring understood explain code including submission. Language documentation refinement: AI used polish English language README, function documentation, code comments clarity professionalism. Debugging, error resolution, best practices: described encountered errors tricky R behaviors ChatGPT, using suggestions fix bugs adapt design. Example prompt: > ‚Äútestthat unit test fails vctrs rcrd accessor error‚Äîstructure S3 method?‚Äù Design discussion alternatives: AI consulted weighing options different R object systems (S3 vs S4 vs R6), file structure organization, test coverage strategies, final decisions integration made team.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/AI-statement.html","id":"how-ai-was-not-used","dir":"","previous_headings":"Use of AI and Generative AI Tools","what":"How AI Was Not Used","title":"AI Statement for Blackjack R Package Project","text":"AI used generate assignment answers automatically without understanding. AI never used write part work without team review, adaptation, critical editing. material copied blindly AI outputs‚Äîevery AI-assisted code section checked, reworked, rewritten needed.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/AI-statement.html","id":"accountability-and-academic-integrity","dir":"","previous_headings":"Use of AI and Generative AI Tools","what":"Accountability and Academic Integrity","title":"AI Statement for Blackjack R Package Project","text":"acknowledge substantial portion codebase originated AI-assisted drafts, logic, structure, final implementations controlled, modified, understood us. accept full responsibility submitted work, confirm reflects learning decision-making required University standards. Every AI-generated suggestion code used understood mechanics appropriateness project. use AI consistent University‚Äôs academic integrity guidelines responsible AI use assessment tasks. prompts uses listed transparency.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/AI-statement.html","id":"limitations-of-ai-use","dir":"","previous_headings":"Use of AI and Generative AI Tools","what":"Limitations of AI Use","title":"AI Statement for Blackjack R Package Project","text":"AI-generated code often required rewriting adaptation fit project needs University standards. AI-suggested solutions contained inefficiencies fully align requirements; learned spot, correct, improve sections. Test coverage currently focused main gameplay simulation logic; auxiliary features robust.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/AI-statement.html","id":"example-prompts-used","dir":"","previous_headings":"","what":"Example Prompts Used","title":"AI Statement for Blackjack R Package Project","text":"‚ÄúWrite S3 constructor card object R.‚Äù ‚Äúgenerate unit test splitting hands Blackjack using testthat?‚Äù ‚ÄúPolish English README section.‚Äù ‚ÄúExplain fix vctrs error R test.‚Äù ‚ÄúSuggest yaml grouping pkgdown user-facing internal functions.‚Äù","code":""},{"path":"https://monasharp.github.io/game-package-wombats/AI-statement.html","id":"statement-of-responsibility","dir":"","previous_headings":"","what":"Statement of Responsibility","title":"AI Statement for Blackjack R Package Project","text":"affirm : - code, documentation, design decisions understood, curated, finalized us. - AI used tool acceleration drafting, replacement skills learning. - use AI fully documented , line University requirements transparency academic integrity. - prepared discuss demonstrate part work evidence understanding engagement. - team members participated using reviewing AI-generated code documentation, share responsibility submitted work. Prepared : Weizhu Chen, Sun Yan Joanna Ma, Aneesh Agarwal Date: 2025-6-6","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"design-philosophy","dir":"Articles","previous_headings":"","what":"üéØ Design Philosophy","title":"Advanced Features and Design of wombat21","text":"wombat21 built three main usage modes‚Äîinteractive gameplay, batch simulation, advanced visualization‚Äîmodular, extensible, high-performance architecture. Interactive Play: user-facing gameplay logic modular transparent. Players can interact human AI opponents, clear APIs betting, splitting, insurance, persistent progress tracking. Flexible Simulation: simulation engine fully programmable: Users can run thousands games automatically, passing custom strategy functions (splitting, insurance, etc.) exploring effects advanced rule variations AI behavior. Rich Visualization: Game results, player history, simulation outcomes can visualized interactively‚Äîmaking easy analyze trends, compare strategies, communicate findings. Modularity, extensibility, performance core wombat21‚Äôs design. core components (cards, hands, strategies, players) built using robust object systems (vctrs, S3), scoring logic accelerated C++ fast, large-scale analysis. design philosophy ensures wombat21 just game, flexible engine research, teaching, advanced experimentation R.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"function-names-and-arguments","dir":"Articles","previous_headings":"","what":"üè∑Ô∏è Function Names and Arguments","title":"Advanced Features and Design of wombat21","text":"user-facing functions wombat21 named clear, concise, consistent, following common R conventions: Verb-based names: Functions perform action named accordingly (e.g., play(), simulate_blackjack(), calculate_score()). Explicit parameter names: Arguments descriptive, self-explanatory, use snake_case (e.g., num_rounds, bet_amount, buy_insurance, split). Strategy customization: applicable, functions accept logical values user-defined functions parameters (split, buy_insurance), supporting flexible advanced gameplay. Consistent interface: function can used interactively (play()), simulation (simulate_blackjack()), visualization (plot_bankroll_history()), using familiar argument conventions. Object arguments: Game logic functions expect well-defined objects (e.g., blackjack_hand, card), ensuring type safety clear data flow. Internal functions (exported) named clear, specific purposes, marked @noRd @keywords internal (e.g., generate_blackjack_hands(), calculate_score_r()). utilities support testing, benchmarking, code reuse, part main user API. consistent naming argument style makes package intuitive use easy extend new advanced users.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"core-data-structures","dir":"Articles","previous_headings":"","what":"üóÉÔ∏è Core Data Structures","title":"Advanced Features and Design of wombat21","text":"card: Represents single playing card (fields: rank, suit) blackjack_hand: Represents player‚Äôs hand (field: cards, vector card objects) players: List player objects (fields: name, coins, is_computer, ‚Ä¶) structure supports flexible extension, validation, efficient manipulation via vctrs S3.","code":""},{"path":[]},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"why-use-vctrs","dir":"Articles","previous_headings":"üß© Object System with vctrs","what":"Why Use vctrs?","title":"Advanced Features and Design of wombat21","text":"vctrs package provides robust foundation type-safe, extensible object-oriented programming R. wombat21, powers entire game logic cards hands. 1. Custom Card Hand Classes wombat21 defines: card: object rank suit, e.g., \"‚ô†\", \"10‚ô¶\" blackjack_hand: player hand consisting card objects built vctrs::new_rcrd(), enabling compact storage automatic validation. 2. Helper Functions Safe Manipulation Custom card hand objects can safely manipulated using helper functions: functions ensure game logic clean, type-safe, readable. 3. Extending S3 + vctrs relevant behaviors‚Äîprinting, type coercion, equality‚Äîregistered explicitly via vctrs::s3_register(). design ensures smooth interoperation base R vectors custom behaviors.","code":"card <- function(rank, suit) {   vctrs::new_rcrd(list(rank = rank, suit = suit), class = \"card\") }  new_blackjack_hand <- function(cards) {   vctrs::new_rcrd(list(cards = cards), class = \"blackjack_hand\") } # Create cards and a hand c1 <- card(\"A\", \"‚ô†\") c2 <- card(\"10\", \"‚ô¶\") hand <- new_blackjack_hand(c(c1, c2))  card_rank(hand$cards)    # Returns c(\"A\", \"10\") card_value(hand$cards)   # Returns c(11, 10) # Custom print method for card objects print.card <- function(x, ...) {   cat(sprintf(\"<card: %s of %s>\\n\", card_rank(x), card_suit(x))) }  # Register vctrs casting and type methods for cards vctrs::s3_register(\"vctrs::vec_cast\", \"card.character\") vctrs::s3_register(\"vctrs::vec_cast\", \"character.card\") vctrs::s3_register(\"vctrs::vec_ptype2\", \"card.character\") vctrs::s3_register(\"vctrs::vec_ptype2\", \"character.card\") vctrs::s3_register(\"vctrs::vec_ptype2\", \"card.card\")"},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"benefits-for-advanced-users-developers","dir":"Articles","previous_headings":"üß© Object System with vctrs","what":"Benefits for Advanced Users & Developers","title":"Advanced Features and Design of wombat21","text":"Safer code: Bugs invalid card hand objects caught early Clearer APIs: Functions clearly expect return game objects Easy extension: Add new rules card types minimal refactoring Better debugging: Informative errors misuse detected","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"metaprogramming-generic-interfaces","dir":"Articles","previous_headings":"","what":"üßµ Metaprogramming & Generic Interfaces","title":"Advanced Features and Design of wombat21","text":"wombat21 heavily rely metaprogramming, demonstrates simple use expression evaluation S3 generics enable flexible logic modular game components.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"metaprogramming-in-action","dir":"Articles","previous_headings":"üßµ Metaprogramming & Generic Interfaces","what":"Metaprogramming in Action","title":"Advanced Features and Design of wombat21","text":"notable use metaprogramming appears AI hit/stand decision logic: pattern lets us evaluate conditional logic dynamically, extended support advanced decision trees strategy DSLs. Although simple , approach allows: Dynamic game strategies (e.g., thresholds formula-based) Pluggable control flows without hardcoding Compatibility user-defined logic future extensions","code":"while (rlang::eval_tidy(rlang::expr(!!current_score < 17))) {   ... }"},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"interface-design-via-s3","dir":"Articles","previous_headings":"üßµ Metaprogramming & Generic Interfaces","what":"Interface Design via S3","title":"Advanced Features and Design of wombat21","text":"Beyond , interface extensibility wombat21 achieved clean S3 generics: card_rank(), card_value(), calculate_score() support class dispatch Functions like card_rank.card() card_rank.character() make logic reusable across S3 card objects plain characters gives: Clear separation internal logic user-visible objects Easy extension new types (e.g., joker_card, double_card) Consistent API behavior helpful fallbacks method dispatch","code":""},{"path":[]},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"want-to-do-more","dir":"Articles","previous_headings":"üßµ Metaprogramming & Generic Interfaces","what":"Want to do more?","title":"Advanced Features and Design of wombat21","text":"advanced metaprogramming, consider: User-defined strategy expressions via quosures Parameterized hit/stand rules embedded play() flow Callable logic passed closures (e.g., split_func, insurance_func ‚Äì already support)","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"boosting-performance-with-rcpp","dir":"Articles","previous_headings":"","what":"‚ö° Boosting Performance with Rcpp","title":"Advanced Features and Design of wombat21","text":"speed critical logic like score calculation, wombat21 uses C++ backend via Rcpp. ensures fast, reliable, vectorized performance even high-volume simulation.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"whats-accelerated","dir":"Articles","previous_headings":"‚ö° Boosting Performance with Rcpp","what":"What‚Äôs Accelerated","title":"Advanced Features and Design of wombat21","text":"computationally intense operation Blackjack score calculation‚Äîespecially due variable value Aces. Instead handling pure R every round, offload C++: internally calls:","code":"calculate_score(hand) calculate_score_cpp(ranks)"},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"how-it-works","dir":"Articles","previous_headings":"‚ö° Boosting Performance with Rcpp","what":"How It Works","title":"Advanced Features and Design of wombat21","text":"ensures: Low latency even thousands hands Correct Ace handling (e.g., dual 1/11) Seamless integration S3/vctrs objects","code":"# R wrapper (R/score_cal.R) calculate_score <- function(hand) {   ...   ranks <- card_rank(cards)   calculate_score_cpp(ranks) } # C++: src/calculate_score.cpp # int calculate_score_cpp(std::vector<std::string> ranks);"},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"when-to-use","dir":"Articles","previous_headings":"‚ö° Boosting Performance with Rcpp","what":"When to Use","title":"Advanced Features and Design of wombat21","text":"don‚Äôt need call C++ version manually‚Äîcalculate_score() handles . advanced users can test use directly: Speed Comparison (10,000 hands)","code":"calculate_score_cpp(c(\"A\", \"A\", \"9\"))  # Returns 21"},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"testing-and-data-persistence","dir":"Articles","previous_headings":"","what":"‚úÖ Testing and Data Persistence","title":"Advanced Features and Design of wombat21","text":"package uses unit tests (via testthat) persistent storage (e.g., save_players()/load_players()) ensure reliability reproducibility features.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"limitations","dir":"Articles","previous_headings":"","what":"üöß Limitations","title":"Advanced Features and Design of wombat21","text":"wombat21 designed flexibility extensibility, still current limitations: Single-deck : single-deck Blackjack implemented; multi-deck shoe games directly supported. Standard rules : Nonstandard Blackjack variants (e.g., double exposure, Spanish 21) included added via user extensions. Strategy granularity: Simulation strategies customizable via function parameters, built-logic intentionally simple. GUI: package console-based; graphical interface provided (though plots interactive). Persistence: Player data saved locally, centralized/cloud-based system. Performance: Scoring uses C++ speed, highly complex batch simulations may slower pure C++/Python.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"alternative-designs","dir":"Articles","previous_headings":"","what":"üîÑ Alternative Designs","title":"Advanced Features and Design of wombat21","text":"considered several alternative approaches developing wombat21: Pure S3 vs vctrs: Adopted vctrs safer extensible objects, used pure S3. R-vs C++ backend: Chose C++ batch speed; R simpler slower. Functional vs OOP: Prioritized functional interfaces OOP composability. Integrated GUI: Focused core logic, left Shiny/desktop GUI clarity. Database/data.table support: Used R lists/local files simplicity; future work add database integration.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"ai-statement","dir":"Articles","previous_headings":"","what":"ü§ñ AI Statement","title":"Advanced Features and Design of wombat21","text":"compliance University policy responsible AI use, openly clearly acknowledge extensive use generative AI tools‚Äîincluding OpenAI ChatGPT GitHub Copilot‚Äîdevelopment assignment.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"how-ai-was-used","dir":"Articles","previous_headings":"ü§ñ AI Statement","what":"How AI Was Used","title":"Advanced Features and Design of wombat21","text":"Initial code generation scaffolding: Many basic functions, S3 class constructors, control-flow templates (card creation, game setup, simulation loops, unit tests) generated ChatGPT, thoroughly reviewed, modified, integrated team. Language documentation refinement: AI used polish English language README, function documentation, code comments. Debugging best practices: consulted ChatGPT error explanations debugging advice, always reviewing adapting outputs inclusion. Design discussion alternatives: AI used ‚Äúsecond opinion‚Äù discussions object systems, file structure, testing coverage, final design decisions made team.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"how-ai-was-not-used","dir":"Articles","previous_headings":"ü§ñ AI Statement","what":"How AI Was Not Used","title":"Advanced Features and Design of wombat21","text":"AI never used submit unreviewed unedited answers. material copied blindly AI outputs‚Äîevery section checked, rewritten, adapted. decisions code integrations reflect understanding academic responsibility.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"accountability-and-academic-integrity","dir":"Articles","previous_headings":"ü§ñ AI Statement","what":"Accountability and Academic Integrity","title":"Advanced Features and Design of wombat21","text":"accept full responsibility code, documentation, design decisions. AI used assistant efficiency idea generation, replacement learning. AI use fully documented , following University transparency integrity policies. prepared discuss demonstrate part work evidence engagement understanding.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"limitations-and-reflection","dir":"Articles","previous_headings":"ü§ñ AI Statement","what":"Limitations and Reflection","title":"Advanced Features and Design of wombat21","text":"AI-generated code often required significant rewriting adaptation meet standards. AI suggestions inefficient incomplete; improved replaced sections needed. Test coverage currently emphasizes core logic; auxiliary features may less robust.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"example-prompts-used","dir":"Articles","previous_headings":"ü§ñ AI Statement","what":"Example Prompts Used","title":"Advanced Features and Design of wombat21","text":"‚ÄúWrite S3 constructor card object R.‚Äù ‚Äúgenerate unit test splitting hands Blackjack using testthat?‚Äù ‚ÄúPolish English README section.‚Äù ‚ÄúExplain fix vctrs error R test.‚Äù ‚ÄúSuggest yaml grouping pkgdown user-facing internal functions.‚Äù","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"statement-of-responsibility","dir":"Articles","previous_headings":"ü§ñ AI Statement","what":"Statement of Responsibility","title":"Advanced Features and Design of wombat21","text":"affirm : team members participated using reviewing AI-assisted code documentation, share responsibility submitted work. AI used aid; logic, structure, integration reflect skills decision-making. use AI aligns University expectations responsible, transparent, ethical assessment practice. Prepared : Weizhu Chen, Sun Yan Joanna Ma, Aneesh Agarwal Date: 2025-06-06","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"team-contribution-summary","dir":"Articles","previous_headings":"","what":"üßë‚Äçü§ù‚Äçüßë Team Contribution Summary","title":"Advanced Features and Design of wombat21","text":"full details team member roles, see project repository.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AD_wombat21.html","id":"conclusion-contribution","dir":"Articles","previous_headings":"","what":"ü§ù Conclusion & Contribution","title":"Advanced Features and Design of wombat21","text":"welcome feature requests, bug reports, community contributions. Feel free open issue submit pull request help make wombat21 even better!","code":""},{"path":[]},{"path":"https://monasharp.github.io/game-package-wombats/articles/AI-statement.html","id":"use-of-ai-and-generative-ai-tools","dir":"Articles","previous_headings":"AI Statement for Blackjack R Package Project","what":"Use of AI and Generative AI Tools","title":"AI Statement","text":"compliance University policy responsible AI use, openly clearly acknowledge extensive use generative AI tools‚Äîincluding OpenAI ChatGPT GitHub Copilot‚Äîdevelopment assignment.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AI-statement.html","id":"how-ai-was-used","dir":"Articles","previous_headings":"AI Statement for Blackjack R Package Project > Use of AI and Generative AI Tools","what":"How AI Was Used","title":"AI Statement","text":"course project, group members used AI tools following purposes: Initial code generation scaffolding: Many basic functions, S3 class constructors, control-flow templates (including functions card creation, game setup, simulation loops, unit tests) generated using ChatGPT based functional requirements. example, asked ChatGPT ‚Äúwrite R function simulate dealing cards Blackjack‚Äù ‚Äúprovide S3 constructor card object‚Äù. thoroughly reviewed, modified, extended, integrated code package structure, ensuring understood explain code including submission. Language documentation refinement: AI used polish English language README, function documentation, code comments clarity professionalism. Debugging, error resolution, best practices: described encountered errors tricky R behaviors ChatGPT, using suggestions fix bugs adapt design. Example prompt: > ‚Äútestthat unit test fails vctrs rcrd accessor error‚Äîstructure S3 method?‚Äù Design discussion alternatives: AI consulted weighing options different R object systems (S3 vs S4 vs R6), file structure organization, test coverage strategies, final decisions integration made team.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AI-statement.html","id":"how-ai-was-not-used","dir":"Articles","previous_headings":"AI Statement for Blackjack R Package Project > Use of AI and Generative AI Tools","what":"How AI Was Not Used","title":"AI Statement","text":"AI used generate assignment answers automatically without understanding. AI never used write part work without team review, adaptation, critical editing. material copied blindly AI outputs‚Äîevery AI-assisted code section checked, reworked, rewritten needed.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AI-statement.html","id":"accountability-and-academic-integrity","dir":"Articles","previous_headings":"AI Statement for Blackjack R Package Project > Use of AI and Generative AI Tools","what":"Accountability and Academic Integrity","title":"AI Statement","text":"acknowledge substantial portion codebase originated AI-assisted drafts, logic, structure, final implementations controlled, modified, understood us. accept full responsibility submitted work, confirm reflects learning decision-making required University standards. Every AI-generated suggestion code used understood mechanics appropriateness project. use AI consistent University‚Äôs academic integrity guidelines responsible AI use assessment tasks. prompts uses listed transparency.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AI-statement.html","id":"limitations-of-ai-use","dir":"Articles","previous_headings":"AI Statement for Blackjack R Package Project > Use of AI and Generative AI Tools","what":"Limitations of AI Use","title":"AI Statement","text":"AI-generated code often required rewriting adaptation fit project needs University standards. AI-suggested solutions contained inefficiencies fully align requirements; learned spot, correct, improve sections. Test coverage currently focused main gameplay simulation logic; auxiliary features robust.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AI-statement.html","id":"example-prompts-used","dir":"Articles","previous_headings":"AI Statement for Blackjack R Package Project","what":"Example Prompts Used","title":"AI Statement","text":"‚ÄúWrite S3 constructor card object R.‚Äù ‚Äúgenerate unit test splitting hands Blackjack using testthat?‚Äù ‚ÄúPolish English README section.‚Äù ‚ÄúExplain fix vctrs error R test.‚Äù ‚ÄúSuggest yaml grouping pkgdown user-facing internal functions.‚Äù","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/AI-statement.html","id":"statement-of-responsibility","dir":"Articles","previous_headings":"AI Statement for Blackjack R Package Project","what":"Statement of Responsibility","title":"AI Statement","text":"affirm : - code, documentation, design decisions understood, curated, finalized us. - AI used tool acceleration drafting, replacement skills learning. - use AI fully documented , line University requirements transparency academic integrity. - prepared discuss demonstrate part work evidence understanding engagement. - team members participated using reviewing AI-generated code documentation, share responsibility submitted work. Prepared : Weizhu Chen, Sun Yan Joanna Ma, Aneesh Agarwal Date: 2025-6-6","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"what-is-wombat21","dir":"Articles","previous_headings":"","what":"üÉè What is wombat21?","title":"wombat21: Multiplayer Blackjack in R","text":"wombat21 modern, fully-featured Blackjack game engine R. lets play friends AI, simulate thousands games, analyze results‚Äîadvanced Blackjack rules persistent player records. Whether ‚Äôre fan card games want explore R programming real-world logic, wombat21 offers fun, hands-way learn, play, experiment. Install dependencies (needed): Tip: plot_bankroll_history() uses plotly interactive charts. want HTML website docs (pkgdown), install pkgdown well.","code":"install.packages(c(\"rlang\", \"vctrs\", \"plotly\", \"dplyr\", \"ggplot2\", \"Rcpp\"))"},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"features","dir":"Articles","previous_headings":"","what":"üéÆ Features","title":"wombat21: Multiplayer Blackjack in R","text":"Multi-player support: 6 human AI players per game Full rules: Split, double , insurance, five-card Charlie, bust detection Persistent progress: Automatic saving player coin balances game history Validated betting system: Safe flexible coin betting input checks Interactive visualization: Track plot bankroll history session trends Leaderboard & rankings: Real-time rankings post-game stats Flexible strategy simulation: Simulate thousands games custom betting, splitting, insurance strategies User-defined strategy functions advanced scenario analysis Batch analysis win rates, insurance efficacy, split success, ","code":""},{"path":[]},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"start-playing","dir":"Articles","previous_headings":"üé≤ Interactive Gameplay","what":"üöÄ Start Playing","title":"wombat21: Multiplayer Blackjack in R","text":"begin game, simply run: ‚Äôll prompted : Choose human computer player Enter player names Place bet Make moves (hit, stand, split, etc.)","code":"play()"},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"betting-and-coins","dir":"Articles","previous_headings":"üé≤ Interactive Gameplay","what":"üí∏ Betting and Coins","title":"wombat21: Multiplayer Blackjack in R","text":"player starts coin balance. bet round. Outcomes impact balance: Blackjack: 1.5√ó payout Win: 1√ó payout Push: bet returned Loss: bet lost 5-card Charlie: auto win coin balance saved sessions player name.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"computer-players","dir":"Articles","previous_headings":"üé≤ Interactive Gameplay","what":"ü§ñ Computer Players","title":"wombat21: Multiplayer Blackjack in R","text":"AI players follow simple strategy: Bet 10 coins remaining balance (whichever less) Hit 16, stand 17+ participate fully round, including betting insurance logic.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"player-rankings","dir":"Articles","previous_headings":"üé≤ Interactive Gameplay","what":"üèÜ Player Rankings","title":"wombat21: Multiplayer Blackjack in R","text":"end round, updated leader-board displayed, showing every player‚Äôs current coin total. rankings refreshed automatically, can see stack friends AI opponents without manual steps.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"bankroll-history","dir":"Articles","previous_headings":"üé≤ Interactive Gameplay","what":"üìù Bankroll History","title":"wombat21: Multiplayer Blackjack in R","text":"game-play, coin balance automatically tracked visualized round. ‚Äôs need run extra code‚Äîjust play game watch bankroll trends update real time.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"play-again-or-exit","dir":"Articles","previous_headings":"üé≤ Interactive Gameplay","what":"üîÅ Play Again or Exit","title":"wombat21: Multiplayer Blackjack in R","text":"end game, ‚Äôll see: Type play another game, exit quit: Simply type choice prompt continue playing leave game.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"custom-strategy-simulation","dir":"Articles","previous_headings":"","what":"üß† Custom Strategy Simulation","title":"wombat21: Multiplayer Blackjack in R","text":"Simulate thousands Blackjack games test strategies automatically. can control whether split, buy insurance, change hit/stand threshold‚Äîjust passing simple options functions.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"basic-example","dir":"Articles","previous_headings":"üß† Custom Strategy Simulation","what":"üö¶ Basic Example","title":"wombat21: Multiplayer Blackjack in R","text":"Run quick simulation default strategy (hit 17, always buy insurance always split pairs):","code":"sim <- simulate_blackjack(num_rounds = 10000) print(sim$win_rate)"},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"customize-your-strategy","dir":"Articles","previous_headings":"üß† Custom Strategy Simulation","what":"‚öôÔ∏è Customize Your Strategy","title":"wombat21: Multiplayer Blackjack in R","text":"can easily change AI plays: Adjust hit/stand rule:Hit chosen score, otherwise stand. Choose always/never split buy insurance:Set split buy_insurance TRUE FALSE. Write decision logic:Pass function control split insurance behavior. Examples: Never split, never buy insurance, hit 18: Custom logic (split 8, buy insurance blackjack):","code":"sim <- simulate_blackjack(   num_rounds = 10000,   threshold = 18,   split = FALSE,   buy_insurance = FALSE ) # Split pairs of A or 8 only; buy insurance only when player's hand is blackjack. sim <- simulate_blackjack(   num_rounds = 10000,   split = function(hand) {     ranks <- card_rank(hand$cards)     length(ranks) == 2 && ranks[1] == ranks[2] && ranks[1] %in% c(\"8\", \"A\")   },   buy_insurance = function(player, dealer_hand) {     is_blackjack(player$hand)   } )"},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"advanced-custom-strategy-functions","dir":"Articles","previous_headings":"üß† Custom Strategy Simulation","what":"üßë‚Äçüíª Advanced: Custom Strategy Functions","title":"wombat21: Multiplayer Blackjack in R","text":"can pass function split buy_insurance argument simulate_blackjack(), enabling sophisticated, context-dependent strategies. Advanced logic: Take dealer‚Äôs upcard account split Advanced insurance logic Compare Strategies Batch Simulation Visualization examples show can build, test, visualize sophisticated blackjack strategies passing custom logic simulation functions.","code":"# Only split A or 8, and never split if dealer shows a 10 or Ace. split_fn <- function(hand, dealer_hand) {   ranks <- card_rank(hand$cards)   dealer_rank <- card_rank(dealer_hand$cards[1])   length(ranks) == 2 &&     ranks[1] == ranks[2] &&     ranks[1] %in% c(\"A\", \"8\") &&     !dealer_rank %in% c(\"10\", \"A\") } # Only buy insurance if player has blackjack AND dealer shows Ace. insurance_fn <- function(player, dealer_hand) {   is_blackjack(player$hand) && card_rank(dealer_hand$cards[1]) == \"A\" } res_advanced <- simulate_blackjack(   num_rounds = 10000,   split = split_fn,   buy_insurance = insurance_fn )  res_simple <- simulate_blackjack(   num_rounds = 10000,   split = FALSE,   buy_insurance = FALSE )  barplot(   c(Advanced = res_advanced$win_rate, Simple = res_simple$win_rate),   beside = TRUE, col = c(\"skyblue\", \"grey\"),   main = \"Win Rate Comparison: Advanced vs Simple Strategy\" )"},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"see-your-results","dir":"Articles","previous_headings":"üß† Custom Strategy Simulation","what":"üìã See Your Results","title":"wombat21: Multiplayer Blackjack in R","text":"Check win rate, loss rate, stats returned list: üí°Try experimenting logic‚Äîwombat21 designed make strategy research powerful fun!","code":"sim$win_rate sim$split_rate sim$final_coins"},{"path":[]},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"export-results","dir":"Articles","previous_headings":"üìà Visualize","what":"üì¶ Export Results","title":"wombat21: Multiplayer Blackjack in R","text":"Strategy Simulation Results running simulation, can export results analysis: Interactive Game Results finishing interactive game (using play()), can export results analysis:","code":"sim <- simulate_blackjack(num_rounds = 10000) save_players(   players = list(You = list(coins = sim$final_coins)),   bankroll_history = sim$bankroll_history ) save_players(players, bankroll_history)"},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"plot-bankroll-history","dir":"Articles","previous_headings":"üìà Visualize","what":"üíπ Plot Bankroll History","title":"wombat21: Multiplayer Blackjack in R","text":"Visualize player‚Äôs coin balance changes time. Creates interactive line chart showing bankroll trends round.","code":"load(file = \"../data/my_simulation_results.rds\")  plot_bankroll_history(sim$bankroll_history)"},{"path":"https://monasharp.github.io/game-package-wombats/articles/wombat21.html","id":"plot-player-rankings","dir":"Articles","previous_headings":"üìà Visualize","what":"üìä Plot Player Rankings","title":"wombat21: Multiplayer Blackjack in R","text":"Compare player coin totals see ‚Äôs top. Displays bar chart ranking players coins.","code":"load(file = \"../data/players_data.rda\")  plot_player_ranking(players = players_data$players)"},{"path":"https://monasharp.github.io/game-package-wombats/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sun Yan Joanna Ma. Author, maintainer. Wei Zhu Chen. Author, contributor. Aneesh Agarwal. Author, contributor.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ma S, Chen W, Agarwal (2025). wombat21: Multiplayer Blackjack Simulation Betting Analytics R. R package version 0.1.0, https://monasharp.github.io/game-package-wombats/.","code":"@Manual{,   title = {wombat21: Multiplayer Blackjack Simulation with Betting and Analytics in R},   author = {Sun Yan Joanna Ma and Wei Zhu Chen and Aneesh Agarwal},   year = {2025},   note = {R package version 0.1.0},   url = {https://monasharp.github.io/game-package-wombats/}, }"},{"path":[]},{"path":"https://monasharp.github.io/game-package-wombats/index.html","id":"what-is-wombat21","dir":"","previous_headings":"","what":"What is wombat21?","title":"wombat21","text":"wombat21 R package simulates fully playable game Blackjack (21). supports: Multiplayer (6 players) Computer-controlled opponents Betting system coin tracking Game logic: splitting, doubling , insurance Dealer logic (automated play) Player profiles saved locally Graphs coin history ranking","code":""},{"path":"https://monasharp.github.io/game-package-wombats/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"wombat21","text":"can install development version wombat21 GitHub : load package:","code":"# install.packages(\"devtools\") devtools::install_github(\"MonashARP/game-package-wombats\") library(wombat21)"},{"path":"https://monasharp.github.io/game-package-wombats/index.html","id":"saving-game-data","dir":"","previous_headings":"","what":"Saving Game Data","title":"wombat21","text":"Player data (names, coin balances, history) stored locally using get_home_dir(). Unique player names enforced.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright ¬© 2007 Free Software Foundation, Inc.¬†<http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program‚Äìmake sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers‚Äô authors‚Äô protection, GPL clearly explains warranty free software. users‚Äô authors‚Äô sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users‚Äô freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"‚ÄúLicense‚Äù refers version 3 GNU General Public License. ‚ÄúCopyright‚Äù also means copyright-like laws apply kinds works, semiconductor masks. ‚ÄúProgram‚Äù refers copyrightable work licensed License. licensee addressed ‚Äú‚Äù. ‚ÄúLicensees‚Äù ‚Äúrecipients‚Äù may individuals organizations. ‚Äúmodify‚Äù work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called ‚Äúmodified version‚Äù earlier work work ‚Äúbased ‚Äù earlier work. ‚Äúcovered work‚Äù means either unmodified Program work based Program. ‚Äúpropagate‚Äù work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. ‚Äúconvey‚Äù work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays ‚ÄúAppropriate Legal Notices‚Äù extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"‚Äúsource code‚Äù work means preferred form work making modifications . ‚ÄúObject code‚Äù means non-source form work. ‚ÄúStandard Interface‚Äù means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. ‚ÄúSystem Libraries‚Äù executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. ‚ÄúMajor Component‚Äù, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . ‚ÄúCorresponding Source‚Äù work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work‚Äôs System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users‚Äô Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work‚Äôs users, third parties‚Äô legal rights forbid circumvention technological measures.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program‚Äôs source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 ‚Äúkeep intact notices‚Äù. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called ‚Äúaggregate‚Äù compilation resulting copyright used limit access legal rights compilation‚Äôs users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. ‚ÄúUser Product‚Äù either (1) ‚Äúconsumer product‚Äù, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, ‚Äúnormally used‚Äù refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. ‚ÄúInstallation Information‚Äù User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"‚ÄúAdditional permissions‚Äù terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered ‚Äúrestrictions‚Äù within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. ‚Äúentity transaction‚Äù transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party‚Äôs predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"‚Äúcontributor‚Äù copyright holder authorizes use License Program work Program based. work thus licensed called contributor‚Äôs ‚Äúcontributor version‚Äù. contributor‚Äôs ‚Äúessential patent claims‚Äù patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, ‚Äúcontrol‚Äù includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor‚Äôs essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, ‚Äúpatent license‚Äù express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). ‚Äúgrant‚Äù patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. ‚ÄúKnowingly relying‚Äù means actual knowledge , patent license, conveying covered work country, recipient‚Äôs use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license ‚Äúdiscriminatory‚Äù include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others‚Äô Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License ‚Äúlater version‚Äù applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy‚Äôs public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM ‚Äú‚Äù WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://monasharp.github.io/game-package-wombats/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least ‚Äúcopyright‚Äù line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program‚Äôs commands might different; GUI interface, use ‚Äúbox‚Äù. also get employer (work programmer) school, , sign ‚Äúcopyright disclaimer‚Äù program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://monasharp.github.io/game-package-wombats/reference/as.character.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce card vector to character ‚Äî as.character.card","title":"Coerce card vector to character ‚Äî as.character.card","text":"Returns character vector like \"‚ô†\", \"10‚ô¶\".","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/as.character.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce card vector to character ‚Äî as.character.card","text":"","code":"# S3 method for class 'card' as.character(x, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/as.character.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce card vector to character ‚Äî as.character.card","text":"x card vector ... Additional arguments (ignored)","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/as.character.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce card vector to character ‚Äî as.character.card","text":"character vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/as.character.card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce card vector to character ‚Äî as.character.card","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) as.character(cards) # [1] \"A‚ô†\" \"10‚ô¶\" \"Q‚ô•\" #> [1] \"A‚ô†\"  \"10‚ô¶\" \"Q‚ô•\""},{"path":"https://monasharp.github.io/game-package-wombats/reference/ask_play_again.html","id":null,"dir":"Reference","previous_headings":"","what":"Ask to play again ‚Äî ask_play_again","title":"Ask to play again ‚Äî ask_play_again","text":"Prompts user play another round exit game.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/ask_play_again.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ask to play again ‚Äî ask_play_again","text":"","code":"ask_play_again()"},{"path":"https://monasharp.github.io/game-package-wombats/reference/ask_play_again.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ask to play again ‚Äî ask_play_again","text":"logical indicating whether player wants play (TRUE) exit (FALSE).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/ask_play_again.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ask to play again ‚Äî ask_play_again","text":"","code":"if (FALSE) { # \\dontrun{ ask_play_again() # User types 'again' or 'exit' at prompt } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Blackjack Score ‚Äî calculate_score","title":"Calculate Blackjack Score ‚Äî calculate_score","text":"Calculates total point value blackjack hand using fast C++ backend.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Blackjack Score ‚Äî calculate_score","text":"","code":"calculate_score(hand)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Blackjack Score ‚Äî calculate_score","text":"hand blackjack_hand object.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Blackjack Score ‚Äî calculate_score","text":"Integer. Total blackjack score hand.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Blackjack Score ‚Äî calculate_score","text":"","code":"hand <- new_blackjack_hand(c(\"A‚ô†\", \"10‚ô¶\")) calculate_score(hand)   # 21 #> [1] 21 hand2 <- new_blackjack_hand(c(\"7‚ô£\", \"8‚ô¶\", \"6‚ô•\")) calculate_score(hand2)  # 21 #> [1] 21"},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Blackjack Score (C++) ‚Äî calculate_score_cpp","title":"Calculate Blackjack Score (C++) ‚Äî calculate_score_cpp","text":"Fast C++ implementation calculating blackjack hand scores. Used internally performance, also available direct use.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Blackjack Score (C++) ‚Äî calculate_score_cpp","text":"","code":"calculate_score_cpp(ranks)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Blackjack Score (C++) ‚Äî calculate_score_cpp","text":"ranks Character vector card ranks (e.g., c(\"\", \"10\", \"K\")).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Blackjack Score (C++) ‚Äî calculate_score_cpp","text":"Integer: blackjack score given hand.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/calculate_score_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Blackjack Score (C++) ‚Äî calculate_score_cpp","text":"","code":"calculate_score_cpp(c(\"A\", \"10\"))   # 21 (Blackjack) #> [1] 21 calculate_score_cpp(c(\"10\", \"7\", \"4\")) # 21 #> [1] 21 calculate_score_cpp(c(\"A\", \"A\", \"9\"))  # 21 (A as 11, other as 1) #> [1] 21"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a card vector ‚Äî card","title":"Create a card vector ‚Äî card","text":"Create card vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a card vector ‚Äî card","text":"","code":"card(rank = character(), suit = character())"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a card vector ‚Äî card","text":"rank Character vector, allowed values:Ôºö\"\",\"2\",...,\"10\",\"J\",\"Q\",\"K\" suit Character vector, allowed valuesÔºö\"‚ô†\",\"‚ô•\",\"‚ô¶\",\"‚ô£\"","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a card vector ‚Äî card","text":"vctrs record vector class \"card\"","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a card vector ‚Äî card","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) print(cards) #> A‚ô† 10‚ô¶ Q‚ô•"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_ace.html","id":null,"dir":"Reference","previous_headings":"","what":"judging A (Ace) ‚Äî card_is_ace","title":"judging A (Ace) ‚Äî card_is_ace","text":"judging (Ace)","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_ace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"judging A (Ace) ‚Äî card_is_ace","text":"","code":"card_is_ace(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_ace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"judging A (Ace) ‚Äî card_is_ace","text":"x card vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_ace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"judging A (Ace) ‚Äî card_is_ace","text":"Logical vector, TRUE indicates rank == \"\"","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_ace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"judging A (Ace) ‚Äî card_is_ace","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) card_is_ace(cards) #> [1]  TRUE FALSE FALSE"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_face.html","id":null,"dir":"Reference","previous_headings":"","what":"judging J/Q/K ‚Äî card_is_face","title":"judging J/Q/K ‚Äî card_is_face","text":"judging J/Q/K","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_face.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"judging J/Q/K ‚Äî card_is_face","text":"","code":"card_is_face(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"judging J/Q/K ‚Äî card_is_face","text":"x card vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_face.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"judging J/Q/K ‚Äî card_is_face","text":"Logical vector, TRUE indicates corresponding rank c(\"J\",\"Q\",\"K\").","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_is_face.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"judging J/Q/K ‚Äî card_is_face","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) card_is_face(cards) #> [1] FALSE FALSE  TRUE"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.blackjack_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"card_rank method for blackjack_hand class ‚Äî card_rank.blackjack_hand","title":"card_rank method for blackjack_hand class ‚Äî card_rank.blackjack_hand","text":"Extracts ranks cards contained blackjack_hand.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.blackjack_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"card_rank method for blackjack_hand class ‚Äî card_rank.blackjack_hand","text":"","code":"# S3 method for class 'blackjack_hand' card_rank(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.blackjack_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"card_rank method for blackjack_hand class ‚Äî card_rank.blackjack_hand","text":"x blackjack_hand object.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.blackjack_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"card_rank method for blackjack_hand class ‚Äî card_rank.blackjack_hand","text":"Character vector ranks card hand.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.card.html","id":null,"dir":"Reference","previous_headings":"","what":"card_rank method for card class ‚Äî card_rank.card","title":"card_rank method for card class ‚Äî card_rank.card","text":"Extracts rank field card object.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"card_rank method for card class ‚Äî card_rank.card","text":"","code":"# S3 method for class 'card' card_rank(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"card_rank method for card class ‚Äî card_rank.card","text":"x card object.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"card_rank method for card class ‚Äî card_rank.card","text":"Character vector ranks.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.character.html","id":null,"dir":"Reference","previous_headings":"","what":"card_rank method for character vectors ‚Äî card_rank.character","title":"card_rank method for character vectors ‚Äî card_rank.character","text":"Extracts rank character strings like \"‚ô†\", \"10‚ô¶\".","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"card_rank method for character vectors ‚Äî card_rank.character","text":"","code":"# S3 method for class 'character' card_rank(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"card_rank method for character vectors ‚Äî card_rank.character","text":"x Character vector card representations.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"card_rank method for character vectors ‚Äî card_rank.character","text":"Character vector ranks.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for card_rank ‚Äî card_rank.default","title":"Default method for card_rank ‚Äî card_rank.default","text":"Returns NULL unsupported classes.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for card_rank ‚Äî card_rank.default","text":"","code":"# Default S3 method card_rank(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for card_rank ‚Äî card_rank.default","text":"x Object class.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the rank of a card Generic function to extract the rank (e.g., ","title":"Extract the rank of a card Generic function to extract the rank (e.g., ","text":"Extract rank card Generic function extract rank (e.g., \"\", \"10\", \"J\") object representing card. function supports objects class card character strings representing cards.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the rank of a card Generic function to extract the rank (e.g., ","text":"","code":"card_rank(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the rank of a card Generic function to extract the rank (e.g., ","text":"x object representing card (e.g., card object character vector like \"‚ô†\").","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the rank of a card Generic function to extract the rank (e.g., ","text":"character vector ranks.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the rank of a card Generic function to extract the rank (e.g., ","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) card_rank(cards) #> [1] \"A\"  \"10\" \"Q\""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_suit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the suit from a card vector ‚Äî card_suit","title":"Extract the suit from a card vector ‚Äî card_suit","text":"Extract suit card vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_suit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the suit from a card vector ‚Äî card_suit","text":"","code":"card_suit(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_suit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the suit from a card vector ‚Äî card_suit","text":"x card vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_suit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the suit from a card vector ‚Äî card_suit","text":"Character vectors, \"‚ô†\",\"‚ô•\",\"‚ô¶\",\"‚ô£\"","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_suit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the suit from a card vector ‚Äî card_suit","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) card_suit(cards) #> [1] \"‚ô†\" \"‚ô¶\" \"‚ô•\""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the initial points of a single card in Blackjack (ensure J/Q/K == 10ÔºåA == 11) ‚Äî card_value","title":"Obtain the initial points of a single card in Blackjack (ensure J/Q/K == 10ÔºåA == 11) ‚Äî card_value","text":"Obtain initial points single card Blackjack (ensure J/Q/K == 10Ôºå== 11)","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the initial points of a single card in Blackjack (ensure J/Q/K == 10ÔºåA == 11) ‚Äî card_value","text":"","code":"card_value(x)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the initial points of a single card in Blackjack (ensure J/Q/K == 10ÔºåA == 11) ‚Äî card_value","text":"x card vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the initial points of a single card in Blackjack (ensure J/Q/K == 10ÔºåA == 11) ‚Äî card_value","text":"Integer vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/card_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain the initial points of a single card in Blackjack (ensure J/Q/K == 10ÔºåA == 11) ‚Äî card_value","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) card_value(cards) #>  A 10  Q  #> 11 10 10"},{"path":"https://monasharp.github.io/game-package-wombats/reference/dealer_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Dealer action logic ‚Äî dealer_action","title":"Dealer action logic ‚Äî dealer_action","text":"Simulate dealer's automatic behavior: keep hitting score >= 17.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/dealer_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dealer action logic ‚Äî dealer_action","text":"","code":"dealer_action(hand, deck)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/dealer_action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dealer action logic ‚Äî dealer_action","text":"hand `blackjack_hand` object deck character vector remaining cards","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/dealer_action.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dealer action logic ‚Äî dealer_action","text":"list updated `hand` `deck`","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/deal_cards.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal initial cards in Blackjack ‚Äî deal_cards","title":"Deal initial cards in Blackjack ‚Äî deal_cards","text":"Deal two cards player dealer shuffled deck. Returns player dealer hands Blackjack format.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/deal_cards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal initial cards in Blackjack ‚Äî deal_cards","text":"","code":"deal_cards(deck = NULL, num_players = 1)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/deal_cards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal initial cards in Blackjack ‚Äî deal_cards","text":"deck character vector representing deck. NULL, fresh 52-card deck used. num_players integer (default = 1). Number players deal cards .","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/deal_cards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal initial cards in Blackjack ‚Äî deal_cards","text":"list following components: player_hands list blackjack_hand objects, one player (hand 2 cards). dealer_hand blackjack_hand object dealer (2 cards). deck remaining deck character vector (undealt cards).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/deal_cards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal initial cards in Blackjack ‚Äî deal_cards","text":"","code":"# Deal for 2 players from a fresh deck hands <- deal_cards(num_players = 2) hands$player_hands      # list of 2 blackjack_hand objects #> [[1]] #> $cards #> 6‚ô£ 10‚ô•  #>  #> attr(,\"class\") #> [1] \"blackjack_hand\" #>  #> [[2]] #> $cards #> Q‚ô† J‚ô¶  #>  #> attr(,\"class\") #> [1] \"blackjack_hand\" #>  hands$dealer_hand       # dealer's hand #> $cards #> Q‚ô¶ 8‚ô£  #>  #> attr(,\"class\") #> [1] \"blackjack_hand\" hands$deck[1:5]         # top 5 cards of remaining deck #> [1] \"5‚ô¶\" \"4‚ô†\" \"9‚ô£\" \"9‚ô†\" \"5‚ô†\"  # Deal from a given deck (e.g. after removing cards) custom_deck <- c(\"A‚ô†\", \"10‚ô¶\", \"5‚ô•\", \"7‚ô£\", \"Q‚ô†\", \"3‚ô¶\", \"K‚ô£\", \"8‚ô†\", \"6‚ô•\", \"2‚ô£\") deal_cards(deck = custom_deck, num_players = 1) #> $player_hands #> $player_hands[[1]] #> $cards #> A‚ô† 10‚ô¶  #>  #> attr(,\"class\") #> [1] \"blackjack_hand\" #>  #>  #> $dealer_hand #> $cards #> 5‚ô• 7‚ô£  #>  #> attr(,\"class\") #> [1] \"blackjack_hand\" #>  #> $deck #> [1] \"Q‚ô†\" \"3‚ô¶\" \"K‚ô£\" \"8‚ô†\" \"6‚ô•\" \"2‚ô£\" #>"},{"path":"https://monasharp.github.io/game-package-wombats/reference/determine_winner.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine winner(s) of a Blackjack game ‚Äî determine_winner","title":"Determine winner(s) of a Blackjack game ‚Äî determine_winner","text":"Determines outcome (\"Player wins\", \"Dealer wins\", \"Push\", etc.) hand list hands.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/determine_winner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine winner(s) of a Blackjack game ‚Äî determine_winner","text":"","code":"determine_winner(player_hand, dealer_hand)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/determine_winner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine winner(s) of a Blackjack game ‚Äî determine_winner","text":"player_hand blackjack_hand list . dealer_hand Dealer's blackjack_hand object.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/determine_winner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine winner(s) of a Blackjack game ‚Äî determine_winner","text":"character outcome (\"Player wins\", ...) named vector multiple hands.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/determine_winner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine winner(s) of a Blackjack game ‚Äî determine_winner","text":"","code":"hand <- new_blackjack_hand(c(\"A‚ô†\", \"K‚ô¶\")) dealer <- new_blackjack_hand(c(\"10‚ô£\", \"8‚ô•\")) determine_winner(hand, dealer) #> [1] \"Player wins with Blackjack\""},{"path":"https://monasharp.github.io/game-package-wombats/reference/display_final_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Display final results with betting outcomes ‚Äî display_final_results","title":"Display final results with betting outcomes ‚Äî display_final_results","text":"Determines winner player, displays results, updates coin balances.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/display_final_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display final results with betting outcomes ‚Äî display_final_results","text":"","code":"display_final_results(player_hands, dealer_hand, players)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/display_final_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display final results with betting outcomes ‚Äî display_final_results","text":"player_hands Named list player hands (can list split hands). dealer_hand Dealer's blackjack_hand object. players Named list player info (must include 'coins', 'bets', etc.).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/display_final_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display final results with betting outcomes ‚Äî display_final_results","text":"Updated named list players adjusted coins round.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/display_final_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display final results with betting outcomes ‚Äî display_final_results","text":"","code":"if (FALSE) { # \\dontrun{ display_final_results(player_hands, dealer_hand, players) } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/end_round.html","id":null,"dir":"Reference","previous_headings":"","what":"End round processing ‚Äî end_round","title":"End round processing ‚Äî end_round","text":"Handles end round operations: displaying results, saving players, updating bankroll history, plotting results.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/end_round.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"End round processing ‚Äî end_round","text":"","code":"end_round(player_hands, dealer_hand, players, players_db, bankroll_history)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/end_round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"End round processing ‚Äî end_round","text":"player_hands Named list player hands (may list blackjack_hand objects). dealer_hand Dealer's blackjack_hand object. players Named list player info (must include 'coins'). players_db Named list: persistent player info. bankroll_history List tracking coin balances rounds.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/end_round.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"End round processing ‚Äî end_round","text":"list : players Updated named list player info. bankroll_history Updated coin history list.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/end_round.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"End round processing ‚Äî end_round","text":"","code":"if (FALSE) { # \\dontrun{ end_round(player_hands, dealer_hand, players, players_db, bankroll_history) } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/exit.html","id":null,"dir":"Reference","previous_headings":"","what":"Exit Blackjack session ‚Äî exit","title":"Exit Blackjack session ‚Äî exit","text":"Intended ending interactive Blackjack session without using play().","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/exit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exit Blackjack session ‚Äî exit","text":"","code":"exit()"},{"path":"https://monasharp.github.io/game-package-wombats/reference/exit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exit Blackjack session ‚Äî exit","text":"Invisibly returns NULL.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/exit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exit Blackjack session ‚Äî exit","text":"","code":"exit()  # Prints \"Exiting Blackjack session. Goodbye!\" #> Exiting Blackjack session. Goodbye!"},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.blackjack_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a Blackjack Hand ‚Äî format.blackjack_hand","title":"Format a Blackjack Hand ‚Äî format.blackjack_hand","text":"Custom print method `blackjack_hand` objects.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.blackjack_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a Blackjack Hand ‚Äî format.blackjack_hand","text":"","code":"# S3 method for class 'blackjack_hand' format(x, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.blackjack_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a Blackjack Hand ‚Äî format.blackjack_hand","text":"x `blackjack_hand` object ... Additional arguments (ignored)","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.blackjack_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a Blackjack Hand ‚Äî format.blackjack_hand","text":"character string representing hand","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a card vector ‚Äî format.card","title":"Format a card vector ‚Äî format.card","text":"Returns character representation like \"‚ô†\", \"10‚ô¶\".","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a card vector ‚Äî format.card","text":"","code":"# S3 method for class 'card' format(x, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a card vector ‚Äî format.card","text":"x card vector ... Additional arguments passed methods","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a card vector ‚Äî format.card","text":"character vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/format.card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a card vector ‚Äî format.card","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) format(cards)   # Returns: \"A‚ô†\" \"10‚ô¶\" \"Q‚ô•\" #> [1] \"A‚ô†\"  \"10‚ô¶\" \"Q‚ô•\""},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_bets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Bets from Players ‚Äî get_bets","title":"Get Bets from Players ‚Äî get_bets","text":"Prompts human player enter bet amount start round, ensuring bet positive integer exceed available coins. Automatically assigns bets computer players. Updates player's 'bets' deducts coins directly.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_bets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Bets from Players ‚Äî get_bets","text":"","code":"get_bets(players)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_bets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Bets from Players ‚Äî get_bets","text":"players named list player objects, player 'coins' field indicating available coins 'is_computer' flag.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_bets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Bets from Players ‚Äî get_bets","text":"named list updated player objects 'bets' updated 'coins'.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_bets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Bets from Players ‚Äî get_bets","text":"","code":"# Example with two players (one human, one computer) players <- list(   You = list(coins = 100, is_computer = FALSE),   Computer_1 = list(coins = 100, is_computer = TRUE) ) # This will prompt for input in interactive mode: # get_bets(players)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_home_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the User's Home Directory ‚Äî get_home_dir","title":"Get the User's Home Directory ‚Äî get_home_dir","text":"Returns robust path user's home directory, fallbacks different operating systems.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_home_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the User's Home Directory ‚Äî get_home_dir","text":"","code":"get_home_dir()"},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_home_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the User's Home Directory ‚Äî get_home_dir","text":"character string containing path user's home directory. unavailable, returns temporary directory path.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/get_home_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the User's Home Directory ‚Äî get_home_dir","text":"","code":"get_home_dir() #> [1] \"C:\\\\Users\\\\13222\\\\Documents\" # Example output (on Linux): \"/home/username\" # Example output (on Windows): \"C:/Users/username\""},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_insurance.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle insurance offers and dealer blackjack check ‚Äî handle_insurance","title":"Handle insurance offers and dealer blackjack check ‚Äî handle_insurance","text":"Offers insurance players dealer's upcard Ace, settles insurance bets depending whether dealer Blackjack. Also reveals dealer's hand upcard 10-value card dealer Blackjack.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_insurance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle insurance offers and dealer blackjack check ‚Äî handle_insurance","text":"","code":"handle_insurance(dealer_hand, players, input_fun = readline, ai_prob = 0.5)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_insurance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle insurance offers and dealer blackjack check ‚Äî handle_insurance","text":"dealer_hand blackjack_hand object dealer. players Named list players (is_computer, coins, bets, etc.). input_fun Function user input (default: readline). ai_prob Numeric, probability AI buying insurance (default 0.5).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_insurance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle insurance offers and dealer blackjack check ‚Äî handle_insurance","text":"list : dealer_blackjack Logical: whether dealer Blackjack. players Updated player list insurance resolution.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_insurance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle insurance offers and dealer blackjack check ‚Äî handle_insurance","text":"","code":"if (FALSE) { # \\dontrun{ # Example: dealer showing Ace, with player and computer players <- list(   Alice = list(is_computer = FALSE, coins = 1000, bets = 100),   Bot = list(is_computer = TRUE, coins = 1000, bets = 100) ) dealer_hand <- new_blackjack_hand(c(\"A‚ô†\", \"10‚ô¶\")) handle_insurance(dealer_hand, players) } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_splitting.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle splitting of pairs ‚Äî handle_splitting","title":"Handle splitting of pairs ‚Äî handle_splitting","text":"Allows eligible players (pair rank) split hand. Handles human/AI decision draws new cards split.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_splitting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle splitting of pairs ‚Äî handle_splitting","text":"","code":"handle_splitting(player_hands, deck, players)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_splitting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle splitting of pairs ‚Äî handle_splitting","text":"player_hands named list lists blackjack_hand objects (hands player). deck Character vector: remaining deck. players Named list player objects (must include player name is_computer).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_splitting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle splitting of pairs ‚Äî handle_splitting","text":"list : player_hands Updated list player hands (split chosen). deck_index Updated index next available card deck.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/handle_splitting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle splitting of pairs ‚Äî handle_splitting","text":"","code":"if (FALSE) { # \\dontrun{ players <- list(   Alice = list(is_computer = FALSE),   Bot = list(is_computer = TRUE) ) hands <- list(   Alice = list(new_blackjack_hand(c(\"8‚ô†\", \"8‚ô¶\"))),   Bot = list(new_blackjack_hand(c(\"A‚ô£\", \"A‚ô•\"))) ) deck <- c(\"10‚ô£\", \"7‚ô†\", \"6‚ô•\", \"5‚ô¶\") handle_splitting(hands, deck, players) } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/input_players.html","id":null,"dir":"Reference","previous_headings":"","what":"Input and validate human and computer players ‚Äî input_players","title":"Input and validate human and computer players ‚Äî input_players","text":"Allows input human player names, creates computer players,              loads creates player data coins.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/input_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input and validate human and computer players ‚Äî input_players","text":"","code":"input_players(players_db)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/input_players.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input and validate human and computer players ‚Äî input_players","text":"players_db Player Database Local Directory","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/input_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Input and validate human and computer players ‚Äî input_players","text":"list two elements: session_players named list players (human computer) info current session. players_db updated player database (named list).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/input_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Input and validate human and computer players ‚Äî input_players","text":"","code":"if (FALSE) { # \\dontrun{ # Typical usage (prompts user for input): res <- input_players(players_db = list()) str(res$session_players) } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_blackjack.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a hand is Blackjack ‚Äî is_blackjack","title":"Check if a hand is Blackjack ‚Äî is_blackjack","text":"Returns TRUE hand exactly 2 cards total 21","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_blackjack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a hand is Blackjack ‚Äî is_blackjack","text":"","code":"is_blackjack(hand)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_blackjack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a hand is Blackjack ‚Äî is_blackjack","text":"hand `blackjack_hand` object","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_blackjack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a hand is Blackjack ‚Äî is_blackjack","text":"TRUE Blackjack, else FALSE","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_blackjack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a hand is Blackjack ‚Äî is_blackjack","text":"","code":"# Example: Blackjack (Ace + King) hand <- new_blackjack_hand(c(\"A‚ô†\", \"K‚ô¶\")) is_blackjack(hand) #> [1] TRUE"},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_five_card_charlie.html","id":null,"dir":"Reference","previous_headings":"","what":"Check 5-card Charlie condition ‚Äî is_five_card_charlie","title":"Check 5-card Charlie condition ‚Äî is_five_card_charlie","text":"Returns TRUE hand 5 cards score ‚â§ 21","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_five_card_charlie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check 5-card Charlie condition ‚Äî is_five_card_charlie","text":"","code":"is_five_card_charlie(hand)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_five_card_charlie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check 5-card Charlie condition ‚Äî is_five_card_charlie","text":"hand `blackjack_hand` object","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_five_card_charlie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check 5-card Charlie condition ‚Äî is_five_card_charlie","text":"TRUE qualifies 5-card Charlie, else FALSE","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/is_five_card_charlie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check 5-card Charlie condition ‚Äî is_five_card_charlie","text":"","code":"# Example: 5-card Charlie hand <- new_blackjack_hand(c(\"2‚ô†\", \"3‚ô•\", \"4‚ô¶\", \"5‚ô£\", \"7‚ô†\")) is_five_card_charlie(hand) #> [1] TRUE"},{"path":"https://monasharp.github.io/game-package-wombats/reference/load_players.html","id":null,"dir":"Reference","previous_headings":"","what":"Load players and bankroll history from disk ‚Äî load_players","title":"Load players and bankroll history from disk ‚Äî load_players","text":"Loads saved player list bankroll history disk, returns defaults save exists.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/load_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load players and bankroll history from disk ‚Äî load_players","text":"","code":"load_players()"},{"path":"https://monasharp.github.io/game-package-wombats/reference/load_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load players and bankroll history from disk ‚Äî load_players","text":"list two elements: players Named list players. bankroll_history List bankroll history (can empty).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/load_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load players and bankroll history from disk ‚Äî load_players","text":"","code":"res <- load_players() str(res$players) #> List of 1 #>  $ Alice:List of 1 #>   ..$ coins: num 1000 str(res$bankroll_history) #>  list()"},{"path":"https://monasharp.github.io/game-package-wombats/reference/new_blackjack_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a blackjack hand (S3 vctrs) ‚Äî new_blackjack_hand","title":"Create a blackjack hand (S3 vctrs) ‚Äî new_blackjack_hand","text":"Create hand object representing set cards","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/new_blackjack_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a blackjack hand (S3 vctrs) ‚Äî new_blackjack_hand","text":"","code":"new_blackjack_hand(cards)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/new_blackjack_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a blackjack hand (S3 vctrs) ‚Äî new_blackjack_hand","text":"cards Character vector card values, e.g. c(\"\", \"10\", \"5\")","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/new_blackjack_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a blackjack hand (S3 vctrs) ‚Äî new_blackjack_hand","text":"`blackjack_hand` S3 object","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/new_blackjack_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a blackjack hand (S3 vctrs) ‚Äî new_blackjack_hand","text":"","code":"new_blackjack_hand(c(\"A‚ô†\", \"10‚ô¶\")) #> $cards #> A‚ô† 10‚ô¶  #>  #> attr(,\"class\") #> [1] \"blackjack_hand\""},{"path":"https://monasharp.github.io/game-package-wombats/reference/play.html","id":null,"dir":"Reference","previous_headings":"","what":"Play a Full Interactive Game of Blackjack ‚Äî play","title":"Play a Full Interactive Game of Blackjack ‚Äî play","text":"Launches interactive multiplayer game Blackjack full game mechanics. game supports six players (human computer), betting, doubling , splitting hands, insurance, dealer logic. Player data (names coin balances) saved sessions. Features include: - Computer-controlled dealer players - Coin betting system balance persistence - Support Blackjack rules: insurance, double , split - Persistent storage player profiles bankroll history","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/play.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Play a Full Interactive Game of Blackjack ‚Äî play","text":"","code":"play()"},{"path":"https://monasharp.github.io/game-package-wombats/reference/play.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Play a Full Interactive Game of Blackjack ‚Äî play","text":"main function run full-featured Blackjack game. game played rounds. round, players asked wish continue. game loop end players wish continue player exits early. #' @return return value. function run side effects: interactive gameplay, screen output, updates stored player data.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/play.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Play a Full Interactive Game of Blackjack ‚Äî play","text":"","code":"if (FALSE) { # \\dontrun{   play() } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/players_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample players data for vignette examples ‚Äî players_data","title":"Sample players data for vignette examples ‚Äî players_data","text":"list containing example players bankroll history.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/players_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample players data for vignette examples ‚Äî players_data","text":"","code":"players_data"},{"path":"https://monasharp.github.io/game-package-wombats/reference/players_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample players data for vignette examples ‚Äî players_data","text":"list components: players data frame list player info bankroll_history data frame list coin balances time","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/players_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample players data for vignette examples ‚Äî players_data","text":"Internal example data wombat21","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/player_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Player action: hit, stand, or double (with betting) ‚Äî player_action","title":"Player action: hit, stand, or double (with betting) ‚Äî player_action","text":"Apply player action (\"hit\", \"stand\", \"double\") one hand, updating hand, deck, player's coin/bet info.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/player_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Player action: hit, stand, or double (with betting) ‚Äî player_action","text":"","code":"player_action(hand, deck, action, player)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/player_action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Player action: hit, stand, or double (with betting) ‚Äî player_action","text":"hand blackjack_hand object. deck character vector remaining cards. action Character: \"hit\", \"stand\", \"double\". player list representing player (fields: 'coins', 'bets', etc.).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/player_action.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Player action: hit, stand, or double (with betting) ‚Äî player_action","text":"list updated elements: hand Updated blackjack hand (blackjack_hand). deck Updated deck (character vector). player Updated player info (list).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/player_action.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Player action: hit, stand, or double (with betting) ‚Äî player_action","text":"","code":"hand <- new_blackjack_hand(c(\"8‚ô†\", \"3‚ô¶\")) deck <- c(\"10‚ô£\", \"4‚ô•\", \"6‚ô£\") player <- list(coins = 900, bets = 100) player_action(hand, deck, \"hit\", player) #> $hand #> $cards #> 8‚ô† 3‚ô¶ 10‚ô£  #>  #> attr(,\"class\") #> [1] \"blackjack_hand\" #>  #> $deck #> [1] \"4‚ô•\" \"6‚ô£\" #>  #> $player #> $player$coins #> [1] 900 #>  #> $player$bets #> [1] 100 #>  #>"},{"path":"https://monasharp.github.io/game-package-wombats/reference/play_player_turns.html","id":null,"dir":"Reference","previous_headings":"","what":"Play player turns for all players ‚Äî play_player_turns","title":"Play player turns for all players ‚Äî play_player_turns","text":"Allows player (human computer) play turn hands (hit/stand/double logic).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/play_player_turns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Play player turns for all players ‚Äî play_player_turns","text":"","code":"play_player_turns(player_hands, deck, players)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/play_player_turns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Play player turns for all players ‚Äî play_player_turns","text":"player_hands named list lists blackjack_hand objects, one list per player. deck Character vector remaining cards. players Named list player info (fields: 'coins', 'bets', 'is_computer', etc.).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/play_player_turns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Play player turns for all players ‚Äî play_player_turns","text":"list: player_hands Updated list player hands. deck Updated deck turns. players Updated player info.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/play_player_turns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Play player turns for all players ‚Äî play_player_turns","text":"","code":"if (FALSE) { # \\dontrun{   # Simulate a single turn for two players   player_hands <- list(     Alice = list(new_blackjack_hand(c(\"9‚ô†\", \"7‚ô¶\"))),     Bob = list(new_blackjack_hand(c(\"5‚ô£\", \"K‚ô•\")))   )   deck <- c(\"8‚ô£\", \"2‚ô¶\", \"4‚ô†\")   players <- list(     Alice = list(coins = 800, bets = 100, is_computer = FALSE),     Bob = list(coins = 800, bets = 100, is_computer = TRUE)   )   play_player_turns(player_hands, deck, players) } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_bankroll_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bankroll history over rounds ‚Äî plot_bankroll_history","title":"Plot bankroll history over rounds ‚Äî plot_bankroll_history","text":"Creates line chart bankrolls time using Plotly.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_bankroll_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bankroll history over rounds ‚Äî plot_bankroll_history","text":"","code":"plot_bankroll_history(bankroll_history)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_bankroll_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bankroll history over rounds ‚Äî plot_bankroll_history","text":"bankroll_history list. element named numeric vector player coins per round.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_bankroll_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bankroll history over rounds ‚Äî plot_bankroll_history","text":"plotly line chart object","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_bankroll_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bankroll history over rounds ‚Äî plot_bankroll_history","text":"","code":"if (FALSE) { # \\dontrun{ bhist <- list(c(Alice = 1000, Bob = 900)) plot_bankroll_history(bhist) } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_player_ranking.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot current player ranking ‚Äî plot_player_ranking","title":"Plot current player ranking ‚Äî plot_player_ranking","text":"Creates bar chart showing player coin rankings, rank numbers chart.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_player_ranking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot current player ranking ‚Äî plot_player_ranking","text":"","code":"plot_player_ranking(players)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_player_ranking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot current player ranking ‚Äî plot_player_ranking","text":"players Named list player objects 'coins' field.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_player_ranking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot current player ranking ‚Äî plot_player_ranking","text":"plotly bar chart object.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/plot_player_ranking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot current player ranking ‚Äî plot_player_ranking","text":"","code":"if (FALSE) { # \\dontrun{ plot_player_ranking(list(Alice = list(coins = 1200), Bob = list(coins = 900))) } # }"},{"path":"https://monasharp.github.io/game-package-wombats/reference/print.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a card vector ‚Äî print.card","title":"Print a card vector ‚Äî print.card","text":"Nicely prints card vector \"‚ô† 10‚ô¶ Q‚ô•\".","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/print.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a card vector ‚Äî print.card","text":"","code":"# S3 method for class 'card' print(x, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/print.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a card vector ‚Äî print.card","text":"x card vector ... Additional arguments passed methods","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/print.card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a card vector ‚Äî print.card","text":"","code":"cards <- card(rank = c(\"A\", \"10\", \"Q\"), suit = c(\"‚ô†\", \"‚ô¶\", \"‚ô•\")) print(cards) #> A‚ô† 10‚ô¶ Q‚ô•"},{"path":"https://monasharp.github.io/game-package-wombats/reference/reset_game_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset game memory: players and/or bankroll history ‚Äî reset_game_data","title":"Reset game memory: players and/or bankroll history ‚Äî reset_game_data","text":"Clears saves player database /bankroll history, depending arguments.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/reset_game_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset game memory: players and/or bankroll history ‚Äî reset_game_data","text":"","code":"reset_game_data(   players_db,   bankroll_history,   reset_players = TRUE,   reset_history = TRUE )"},{"path":"https://monasharp.github.io/game-package-wombats/reference/reset_game_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset game memory: players and/or bankroll history ‚Äî reset_game_data","text":"players_db Named list players (reset). bankroll_history List tracking coin balances rounds (reset). reset_players Logical. Whether clear players_db (default TRUE). reset_history Logical. Whether clear bankroll_history (default TRUE).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/reset_game_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset game memory: players and/or bankroll history ‚Äî reset_game_data","text":"list two elements: players_db Possibly reset players database (list). bankroll_history Possibly reset bankroll history (list).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/reset_game_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset game memory: players and/or bankroll history ‚Äî reset_game_data","text":"","code":"players_db <- list(Alice = list(coins = 1000)) bankroll_history <- list() reset_game_data(players_db, bankroll_history) #>  players_db has been cleared. #>  bankroll_history has been cleared. #> $players_db #> list() #>  #> $bankroll_history #> list() #>"},{"path":"https://monasharp.github.io/game-package-wombats/reference/save_players.html","id":null,"dir":"Reference","previous_headings":"","what":"Save players and bankroll history to disk ‚Äî save_players","title":"Save players and bankroll history to disk ‚Äî save_players","text":"Saves player list optional bankroll history file user's home directory.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/save_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save players and bankroll history to disk ‚Äî save_players","text":"","code":"save_players(players, bankroll_history = NULL)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/save_players.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save players and bankroll history to disk ‚Äî save_players","text":"players Named list players. bankroll_history Optional. list; element named numeric vector player coins per round.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/save_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save players and bankroll history to disk ‚Äî save_players","text":"Invisibly returns NULL.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/save_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save players and bankroll history to disk ‚Äî save_players","text":"","code":"save_players(list(Alice = list(coins = 1000)), list())"},{"path":"https://monasharp.github.io/game-package-wombats/reference/setup_and_display_initial.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up the game and display initial hands with bets ‚Äî setup_and_display_initial","title":"Set up the game and display initial hands with bets ‚Äî setup_and_display_initial","text":"Shuffles deck, deals initial hands players dealer, deducts bets, displays initial cards (one revealed hand).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/setup_and_display_initial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up the game and display initial hands with bets ‚Äî setup_and_display_initial","text":"","code":"setup_and_display_initial(players)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/setup_and_display_initial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up the game and display initial hands with bets ‚Äî setup_and_display_initial","text":"players named list player objects; include 'name', 'coins', 'bets' fields.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/setup_and_display_initial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up the game and display initial hands with bets ‚Äî setup_and_display_initial","text":"list : deck Remaining shuffled deck card vector. player_hands Named list player's blackjack_hand (initial 2 cards). dealer_hand dealer's blackjack_hand. players Updated players list (bets already deducted).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/setup_and_display_initial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up the game and display initial hands with bets ‚Äî setup_and_display_initial","text":"","code":"players <- list(   Alice = list(name = \"Alice\", coins = 1000, bets = 100),   Bob = list(name = \"Bob\", coins = 1000, bets = 100) ) res <- setup_and_display_initial(players) #> Alice's hand: 6‚ô• ? | Bet: 100 #> Bob's hand: Q‚ô£ ? | Bet: 100 #> Dealer shows: J‚ô† ? # res$deck, res$player_hands, res$dealer_hand, res$players"},{"path":"https://monasharp.github.io/game-package-wombats/reference/simulate_blackjack.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Blackjack games with customizable hit, insurance, and split strategies ‚Äî simulate_blackjack","title":"Simulate Blackjack games with customizable hit, insurance, and split strategies ‚Äî simulate_blackjack","text":"Simulate multiple rounds Blackjack using fully automated AI logic. Allows user specify hit/stand threshold, whether buy insurance (logical custom function), whether/split pairs (logical function).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/simulate_blackjack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Blackjack games with customizable hit, insurance, and split strategies ‚Äî simulate_blackjack","text":"","code":"simulate_blackjack(   num_rounds = 10000,   bet_amount = 10,   initial_coins = 1000,   threshold = 17,   buy_insurance = TRUE,   split = FALSE )"},{"path":"https://monasharp.github.io/game-package-wombats/reference/simulate_blackjack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Blackjack games with customizable hit, insurance, and split strategies ‚Äî simulate_blackjack","text":"num_rounds Number games simulate bet_amount Fixed bet per round initial_coins Starting coins player threshold Hit < threshold, stand >= threshold buy_insurance Logical function; TRUE, always buy insurance dealer shows . function, return TRUE/FALSE given (player, dealer_hand). split Logical function; TRUE, always split possible; function, custom logic (function(hand) returns TRUE/FALSE).","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/simulate_blackjack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Blackjack games with customizable hit, insurance, and split strategies ‚Äî simulate_blackjack","text":"list: win/lose/tie/insurance/split stats bankroll history","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/simulate_blackjack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Blackjack games with customizable hit, insurance, and split strategies ‚Äî simulate_blackjack","text":"","code":"# Always split pairs, always buy insurance, hit <17 stand >=17 res <- simulate_blackjack(num_rounds = 10000, threshold = 17, buy_insurance = TRUE, split = TRUE) print(res$win_rate) #> [1] 0.5907  # Never split, never buy insurance, hit <18 stand >=18 res <- simulate_blackjack(num_rounds = 10000, threshold = 18, buy_insurance = FALSE, split = FALSE)  # Split only A or 8, only buy insurance if own hand is blackjack res <- simulate_blackjack(   num_rounds = 10000,   threshold = 17,   buy_insurance = function(player, dealer_hand) {     # Only buy insurance if player has blackjack     is_blackjack(player$hand)   },   split = function(hand) {     ranks <- card_rank(hand$cards)     length(ranks) == 2 && ranks[1] == ranks[2] && ranks[1] %in% c(\"8\", \"A\")   } )"},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.card.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast character vector to card ‚Äî vec_cast.card.character","title":"Cast character vector to card ‚Äî vec_cast.card.character","text":"Converts character like \"‚ô†\", \"10‚ô¶\" card object. Converts character like \"‚ô†\", \"10‚ô¶\" card object.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.card.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast character vector to card ‚Äî vec_cast.card.character","text":"","code":"# S3 method for class 'card.character' vec_cast(x, to, ..., x_arg = \"x\", to_arg = \"to\")  # S3 method for class 'card.character' vec_cast(x, to, ..., x_arg = \"x\", to_arg = \"to\")"},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.card.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast character vector to card ‚Äî vec_cast.card.character","text":"x character vector card prototype ... Additional arguments passed methods x_arg Name x argument (used error messages) to_arg Name argument (used error messages)","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.card.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast character vector to card ‚Äî vec_cast.card.character","text":"card vector card vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast anything to card (identity or error) ‚Äî vec_cast.card","title":"Cast anything to card (identity or error) ‚Äî vec_cast.card","text":"Used internally vctrs S3 casting.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast anything to card (identity or error) ‚Äî vec_cast.card","text":"","code":"# S3 method for class 'card' vec_cast(x, to, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast anything to card (identity or error) ‚Äî vec_cast.card","text":"x Input object. Card prototype. ... Additional arguments (ignored)","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast anything to card (identity or error) ‚Äî vec_cast.card","text":"Card vector error","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.character.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast card to character vector ‚Äî vec_cast.character.card","title":"Cast card to character vector ‚Äî vec_cast.character.card","text":"Converts card object back character like \"Q‚ô•\".","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.character.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast card to character vector ‚Äî vec_cast.character.card","text":"","code":"# S3 method for class 'character.card' vec_cast(x, to, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.character.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast card to character vector ‚Äî vec_cast.character.card","text":"x card object Unused ... Additional arguments passed methods","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_cast.character.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast card to character vector ‚Äî vec_cast.character.card","text":"Character vector","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.card.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Type promotion method for card objects ‚Äî vec_ptype2.card.card","title":"Type promotion method for card objects ‚Äî vec_ptype2.card.card","text":"Implements method dispatch combining card character/card types.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.card.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type promotion method for card objects ‚Äî vec_ptype2.card.card","text":"","code":"# S3 method for class 'card.card' vec_ptype2(x, y, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.card.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type promotion method for card objects ‚Äî vec_ptype2.card.card","text":"x card character vector y Another card character vector ... Additional arguments passed methods","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.card.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type promotion method for card objects ‚Äî vec_ptype2.card.card","text":"card prototype","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.card.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Type promotion method for card objects ‚Äî vec_ptype2.card.character","title":"Type promotion method for card objects ‚Äî vec_ptype2.card.character","text":"Implements method dispatch combining card character/card types.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.card.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type promotion method for card objects ‚Äî vec_ptype2.card.character","text":"","code":"# S3 method for class 'card.character' vec_ptype2(x, y, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.card.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type promotion method for card objects ‚Äî vec_ptype2.card.character","text":"x card character vector y Another card character vector ... Additional arguments passed methods","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.card.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type promotion method for card objects ‚Äî vec_ptype2.card.character","text":"card prototype","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.character.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Type promotion method for card objects ‚Äî vec_ptype2.character.card","title":"Type promotion method for card objects ‚Äî vec_ptype2.character.card","text":"Implements method dispatch combining card character/card types.","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.character.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type promotion method for card objects ‚Äî vec_ptype2.character.card","text":"","code":"# S3 method for class 'character.card' vec_ptype2(x, y, ...)"},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.character.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type promotion method for card objects ‚Äî vec_ptype2.character.card","text":"x card character vector y Another card character vector ... Additional arguments passed methods","code":""},{"path":"https://monasharp.github.io/game-package-wombats/reference/vec_ptype2.character.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type promotion method for card objects ‚Äî vec_ptype2.character.card","text":"card prototype","code":""}]
